
# This workflow will build the ViRelAy project and publish the artifacts to PyPI when a GitHub release is created
name: ViRelAy Continuous Deployment

# This workflow will run when a new release is created on GitHub, the process works like this:
#   1) For each milestone multiple issues are created)
#   2) For each issue a new branch is branched off from the develop branch (which itself is branched off from master)
#   3) When the issue is resolved, a pull request is created to merge the issue branch into the develop branch
#   4) Once all issues for a milestone are resolved, a pull request is created to merge the develop branch into the master branch
#   5) When the pull request is merged, a new release is created
#   6) This workflow will then be triggered and the ViRelAy project will be built and published to PyPI
on:
  release:
    types:
      - created

# This workflow contains a single job for building and publishing the ViRelAy project
jobs:

  # Builds and publishes the ViRelAy project
  build-and-publish:

    # The job will run on the latest version of Ubuntu
    name: Build and Publish the ViRelAy Project
    runs-on: ubuntu-latest

    # Gives the job permission to write the ID token, which is required for trusted publishing; trusted publishing is a way to publish packages to a
    # package index (like PyPI) without needing to store credentials in the repository; trusted publishing is set up beforehand and during the
    # publishing step and allows the job to automatically authenticate with the package index to retrieve a JWT token for publishing the package; the
    # write permission is allows GitHub to generate an OIDC token, which is used to authenticate with the package index and retrieve the JWT token
    permissions:
      id-token: write

    # Specifies that we want to deploy to PyPI
    environment:
      name: pypi
      url: https://pypi.org/p/virelay

    # The job contains several steps: 1) checking out the repository, 2) installing the Python project management tool uv, 3) installing Python, 4)
    # installing Node.js for building the frontend, 5) installing the dependencies of ViRelAy, 6) building the ViRelAy project, and 7) publishing the
    # ViRelAy project
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: 0.4.24
      - name: Install Python
        run: uv python install 3.13.0
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install ViRelAy and its Dependencies
        run: uv --directory source/backend sync --all-extras
      - name: Build the ViRelAy Project
        run: uv --directory source/backend build
      - name: Publish the ViRelAy Project to PyPI
        run: uv --directory source/backend publish --repository pypi
