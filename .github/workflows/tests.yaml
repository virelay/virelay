
# This workflow will run the unit tests, the linters, the static type checker, the spell checker, and will build the documentation
name: ViRelAy Continuous Integration

# This workflow runs when commits are pushed to the master/develop branch or when a pull request for the master/develop branch is opened or pushed to
on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

# This workflow contains multiple jobs for unit testing, linting, type checking, spell checking, and building
jobs:

  # Runs the unit tests on Python 3.10, 3.11, 3.12, and 3.13
  unit-tests:

    # The job will run on the latest version of Ubuntu using a matrix strategy, where the unit tests are run using Python 3.10, 3.11, 3.12, and 3.13
    name: Unit Test ViRelAy Backend on Python ${{matrix.python-version}}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - tox-environment: py310
            python-version: "3.10.15"
          - tox-environment: py311
            python-version: "3.11.10"
          - tox-environment: py312
            python-version: "3.12.7"
          - tox-environment: py313
            python-version: "3.13.0"

    # The job contains several steps: 1) checking out the repository, 2) installing the Python project management tool uv, 3) installing the correct
    # Python version, 4) setting up the test environment by installing ViRelAy and its dependencies, 5) installing Node.js for building the frontend,
    # which is required by the unit tests for testing whether the frontend files are correctly served via the backend, 6) installing the dependencies
    # of the frontend, 7) building the frontend, and finally 8) running the unit tests
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: 0.4.24
      - name: Install Python
        run: uv python install ${{ matrix.python-version }}
      - name: Install ViRelAy and its Dependencies
        run: uv --directory source/backend sync --all-extras --dev
      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install Frontend Dependencies
        run: npm --prefix source/frontend install
      - name: Build Frontend
        run: npm --prefix source/frontend run build
      - name: Run Unit Tests
        run: uv --directory source/backend run tox --conf ../../tests/config/tox.ini run -e ${{ matrix.tox-environment }}

  # Runs the PyLint linter
  pylint:

    # The job will run on the latest version of Ubuntu
    name: Lint ViRelAy Backend Using PyLint
    runs-on: ubuntu-latest

    # The job contains several steps: 1) checking out the repository, 2) installing the Python project management tool uv, 3) installing the correct
    # Python version, 4) setting up the test environment by installing ViRelAy and its dependencies, and 5) running the PyLint linter
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: 0.4.24
      - name: Install Python
        run: uv python install 3.13.0 3.9.20
      - name: Install ViRelAy and its Dependencies
        run: uv --directory source/backend sync --all-extras --dev
      - name: Run PyLint Linter
        run: uv --directory source/backend run tox --conf ../../tests/config/tox.ini run -e pylint

  # Runs the PyCodeStyle linter
  pycodestyle:

    # The job will run on the latest version of Ubuntu
    name: Lint ViRelAy Backend Using PyCodeStyle
    runs-on: ubuntu-latest

    # The job contains several steps: 1) checking out the repository, 2) installing the Python project management tool uv, 3) installing the correct
    # Python version, 4) setting up the test environment by installing ViRelAy and its dependencies, and 5) running the PyCodeStyle linter
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: 0.4.24
      - name: Install Python
        run: uv python install 3.13.0 3.9.20
      - name: Install ViRelAy and its Dependencies
        run: uv --directory source/backend sync --all-extras --dev
      - name: Run PyLint Linter
        run: uv --directory source/backend run tox --conf ../../tests/config/tox.ini run -e pycodestyle

  # Runs the PyDocLint docstring linter
  pydoclint:

    # The job will run on the latest version of Ubuntu
    name: Lint ViRelAy Backend Docstrings Using PyDocLint
    runs-on: ubuntu-latest

    # The job contains several steps: 1) checking out the repository, 2) installing the Python project management tool uv, 3) installing the correct
    # Python version, 4) setting up the test environment by installing ViRelAy and its dependencies, and 5) running the PyDocLint docstring linter
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: 0.4.24
      - name: Install Python
        run: uv python install 3.13.0 3.9.20
      - name: Install ViRelAy and its Dependencies
        run: uv --directory source/backend sync --all-extras --dev
      - name: Run PyLint Linter
        run: uv --directory source/backend run tox --conf ../../tests/config/tox.ini run -e pydoclint

  # Runs the MyPy static type checker
  mypy:

    # The job will run on the latest version of Ubuntu
    name: Static Type-Check ViRelAy Backend Using MyPy
    runs-on: ubuntu-latest

    # The job contains several steps: 1) checking out the repository, 2) installing the Python project management tool uv, 3) installing the correct
    # Python version, 4) setting up the test environment by installing ViRelAy and its dependencies, and 5) running the MyPy static type checker
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: 0.4.24
      - name: Install Python
        run: uv python install 3.13.0 3.9.20
      - name: Install ViRelAy and its Dependencies
        run: uv --directory source/backend sync --all-extras --dev
      - name: Run PyLint Linter
        run: uv --directory source/backend run tox --conf ../../tests/config/tox.ini run -e mypy

  # Runs the ESLint linter
  eslint:

    # The job will run on the latest version of Ubuntu
    name: Lint ViRelAy Frontend Using ESLint
    runs-on: ubuntu-latest

    # The job contains several steps: 1) checking out the repository, 2) installing Node.js, 3) installing the dependencies of the ESLint global
    # configuration, 4) installing the dependencies of the frontend which includes the ESLint linter, and 5) running the ESLint linter
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install ESLint Global Configuration
        run: npm --prefix tests/eslint install
      - name: Install Frontend Dependencies
        run: npm --prefix source/frontend install
      - name: Run ESLint Linter
        run: npm --prefix source/frontend run eslint

  # Runs the Stylelint linter
  stylelint:

    # The job will run on the latest version of Ubuntu
    name: Lint ViRelAy Frontend Using Stylelint
    runs-on: ubuntu-latest

    # The job contains several steps: 1) checking out the repository, 2) installing Node.js, 3) installing the dependencies of the Stylelint global
    # configuration, 4) installing the dependencies of the frontend which includes the Stylelint linter, and 5) running the Stylelint linter
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install Stylelint Global Configuration
        run: npm --prefix tests/stylelint install
      - name: Install Frontend Dependencies
        run: npm --prefix source/frontend install
      - name: Run Stylelint Linter
        run: npm --prefix source/frontend run stylelint

  # Runs the HTML-Validate linter
  html-validate:

    # The job will run on the latest version of Ubuntu
    name: Lint ViRelAy Frontend Using HTML-Validate
    runs-on: ubuntu-latest

    # The job contains several steps: 1) checking out the repository, 2) installing Node.js, 3) installing the dependencies of the frontend which
    # includes the HTML-Validate linter, and 4) running the HTML-Validate linter
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install Frontend Dependencies
        run: npm --prefix source/frontend install
      - name: Run HTML-Validate Linter
        run: npm --prefix source/frontend run html-validate

  # Runs the Markdownlint linter
  markdownlint:

    # The job will run on the latest version of Ubuntu
    name: Lint ViRelAy Frontend Using Markdownlint
    runs-on: ubuntu-latest

    # The job contains several steps: 1) checking out the repository, 2) installing Node.js, 3) installing the dependencies of the Markdownlint
    # global configuration, and 4) running the Markdownlint linter
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install Markdownlint Global Configuration
        run: npm --prefix tests/markdownlint install
      - name: Run Markdown Linter
        run: npm --prefix tests/markdownlint run markdownlint

  # Runs the spell checker CSpell to spell-check all files in the repository
  spell-check:

    # The job will run on the latest version of Ubuntu; usually, when a job fails, the entire workflow will fail, but in this case, we do not want the
    # the workflow to fail if the spell-check fails
    name: Spell-Check Repository
    runs-on: ubuntu-latest
    continue-on-error: true

    # The job contains several steps: 1) checking out the repository, 2) installing Node.js, 3) installing the dependencies of the CSpell global
    # configuration, and 4) running the CSpell spell checker
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install CSpell Global Configuration
        run: npm --prefix tests/cspell install
      - name: Run CSpell Spell Checker
        run: npm --prefix tests/cspell run cspell

  # Builds the documentation using Sphinx
  build-documentation:

    # The job will run on the latest version of Ubuntu; usually, when a job fails, the entire workflow will fail, but in this case, we do not want the
    # the workflow to fail if the documentation build fails
    name: Build ViRelAy Documentation
    runs-on: ubuntu-latest
    continue-on-error: true

    # The job contains several steps: 1) checking out the repository, 2) installing the Python project management tool uv, 3) installing the correct
    # Python version, 4) installing TeX Live, which is required by Pybtex, a replacement for BibTeX, used by Sphinx to generate the citations in the
    # documentation, and 5) building the documentation
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: 0.4.24
      - name: Install Python
        run: uv python install 3.13.0 3.9.20
      - name: Install TeX Live for Pybtex
        run: sudo apt-get update -y && sudo apt-get install -y texlive texlive-latex-extra dvipng
      - name: Build Documentation
        run: uv --directory source/backend run tox --conf ../../tests/config/tox.ini run --notest -e docs
