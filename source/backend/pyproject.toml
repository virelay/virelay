
# The project's basic metadata and dependencies
[project]

# General project information, the Project supports Python 3.10, 3.11, 3.12 and 3.13; the version of the project is automatically determined from the
# latest Git tag using the Hatch-VCS plugin and the read me is dynamically generated using the Hatch Fancy PyPI Readme plugin (this  is necessary,
# because Hatch cannot access the root directory of the repository while building the wheel, which is where the read me is located; Hatch first builds
# the source distribution from the files in the project directory, from where it can access top-level repository files, and then builds the wheel from
# the source distribution by extracting it into a temporary directory, from where it cannot access the top-level repository files)
name = "virelay"
description = """\
    ViRelAy is a web-based XAI tool for analyzing classifiers and their datasets by visualizing the source-data, attributions, clusterings, and \
    embeddings as generated by tools like CoRelAy.\
    """
keywords = [
    "ViRelAy",
    "Spectral Relevance Analysis",
    "SpRAy",
    "Explainable AI",
    "XAI",
    "Interpretability",
    "Visual Analytics",
    "Machine Learning",
    "Deep Learning",
    "Artificial Intelligence"
]
license = "AGPL-3.0-or-later"
requires-python = ">=3.10"
dynamic = [
    "readme",
    "version"
]

# The maintainers (people actively working on the project) and authors (people who have contributed to the project)
maintainers = [
    {name = "David Neumann", email = "david.neumann@lecode.de"},
    {name = "Christopher J. Anders", email = "contact@cjanders.de"}
]
authors = [
    {name = "Christopher J. Anders", email = "contact@cjanders.de"},
    {name = "David Neumann", email = "david.neumann@lecode.de"},
    {name = "Talmaj Marinc", email = "talmaj@gmail.com"},
    {name = "Sebastian Lapuschkin", email = "sebastian.lapuschkin@hhi.fraunhofer.de"},
    {name = "Pattarawat Chormai", email = "pat.chormai@gmail.com"}
]

# The project's dependencies, which are included in the requirements of the published package
dependencies = [
    "flask-cors>=5.0.1,<6.0.0",
    "flask>=3.1.0,<4.0.0",
    "gunicorn>=23.0.0,<24.0.0",
    "h5py>=3.13.0,<4.0.0",
    "matplotlib>=3.10.1,<4.0.0",
    "numpy>=2.1.2,<3.0.0",
    "pillow>=10.4.0,<11.0.0",
    "pyyaml>=6.0.2,<7.0.0",
    "typing-extensions>=4.13.1,<5.0.0"
]

# The PyPI classifiers that describe the project
classifiers = [
    "Natural Language :: English",
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed"
]

# The URLs to the documentation, the repository, the issue tracker, and the changelog
[project.urls]
Documentation = "https://virelay.readthedocs.io/en/latest/"
Repository = "https://github.com/virelay/virelay.git"
Issues = "https://github.com/virelay/virelay/issues"
Changelog = "https://github.com/virelay/virelay/blob/master/CHANGELOG.md"

# Entrypoints for the project (these are installed as scripts when the package is installed)
[project.scripts]
virelay = "virelay.application:run_cli_app"

# Configuration specified to the UV Python package manager
[tool.uv]

# Dependencies that are only installed during the development of the project and are not included in the requirements of the published package
dev-dependencies = [

    # Dependencies required for building the documentation
    "sphinx>=8.1.3,<9.0.0",
    "sphinx-copybutton>=0.5.2,<1.0.0",
    "sphinx-new-tab-link>=0.8.0,<1.0.0",
    "sphinx-rtd-theme>=3.0.2,<4.0.0",
    "sphinxcontrib.bibtex>=2.6.3,<3.0.0",
    "sphinxcontrib.datatemplates>=0.11.0,<1.0.0",

    # Dependencies required for testing
    "tox>=4.25.0,<5.0.0",
    "tox-uv>=1.25.0,<2.0.0",
    "pytest>=8.3.5,<9.0.0",
    "pytest-cov>=6.1.1,<7.0.0",
    "coverage>=7.8.0,<8.0.0",

    # Dependencies required for linting
    "pylint>=3.3.6,<4.0.0",
    "pycodestyle>=2.13.0,<3.0.0",
    "pydoclint>=0.6.5,<1.0.0",
    "mypy>=1.15.0,<2.0.0",

    # Dependencies required for type-checking
    "types-Flask-Cors>=5.0.0.20240902,<6.0.0",
    "types-PyYAML>=6.0.12.20250402,<7.0.0"
]

# Configures which build system is used by UV to build the project
[build-system]
requires = [
    "hatchling>=1.25.0,<2.0.0",
    "hatch-build-scripts>=0.0.4",
    "hatch-vcs>=0.4.0,<1.0.0",
    "hatch-fancy-pypi-readme>=24.1.0,<25.0.0"
]
build-backend = "hatchling.build"

# Configures the Hatch-VCS plugin that is used to dynamically determine the version of the project based on the current Git tag
[tool.hatch.version]
source = "vcs"
fallback-version = "0.0.0"
raw-options = { root = "../.." }

# Configures the Hatch-VCS build hook, which is used to write the version of the project to the version file
[tool.hatch.build.hooks.vcs]
version-file = "virelay/version.py"

# Configures the Hatch Fancy PyPI Readme plugin to compose the content of the read me file from the project's read me file, which is located in the
# root directory of the repository
[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"
[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "../../README.md"

# Configures the hatch-build-script plugin, which uses build hooks to run arbitrary build scripts during the build of the project; this is used to
# the Angular frontend of the project and include its files in the source distribution (the wheel will be build by extracting the source distribution
# into a temporary directory, therefore, the script is only run for the source distribution because it will already include the frontend files; also,
# the relative path "../frontend" is no longer available in the temporary directory from where the wheel is build; no artifacts are copied here,
# because the hatch-build-script plugin would copy the entire directory structure, which is not the way we want the files to be included; instead, the
# frontend files are included using the force-include configuration below)
[[tool.hatch.build.targets.sdist.hooks.build-scripts.scripts]]
out_dir = "virelay/frontend"
work_dir = "../frontend"
commands = [
    "npm install",
    "npm run build"
]
clean_artifacts = false
artifacts = []

# Includes the build artifacts of the Angular frontend in the source distribution of the project
[tool.hatch.build.targets.sdist.force-include]
"../frontend/distribution/browser" = "virelay/frontend"
