
# Core tox configuration
[tox]

# A list of environments that will be run by default when running tox without specifying any environment
env_list = py310,py311,py312,py313,coverage,pylint,pycodestyle,pydoclint,mypy,docs

# Base configuration for test environments that tox will fallback to for missing values; this avoids having to repeat the same configuration for the
# unit test environments py310, py311, py312, and py313 over and over again; it runs the unit tests for the backend REST API with the corresponding
# Python version
[testenv]
set_env =
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
commands =
    uv run pytest \
        --cov "../../source/backend/virelay" \
        --cov-config "tox.ini" \
        --cov-append \
        {posargs:../unit_tests}

# A test environment that combines the coverage data from all runs of the unit tests with the different Python versions and generates a single report
[testenv:coverage]
set_env =
    COVERAGE_FILE = {toxworkdir}/.coverage
depends = py310,py311,py312,py313
commands =
    uv run coverage combine
    uv run coverage report -m

# A test environment that will build the documentation using Sphinx
[testenv:docs]
base_python = python3.13
commands =
    uv run sphinx-build \
        --color \
        -W \
        --keep-going \
        -d "../../docs/doctree" \
        -b html \
        "../../docs/source" \
        "../../docs/build" \
        {posargs}

# A test environment that will run the PyLint linter on the REST API backend, the unit tests, the setup script, and the Sphinx configuration file
[testenv:pylint]
base_python = python3.13
commands =
    uv run pylint \
        --rcfile=".pylintrc" \
        --output-format=parseable \
        "../../source/backend/virelay" \
        "../unit_tests" \
        "../../docs/source/conf.py"
    uv run \
        --no-project \
        --python 3.9.20 \
        --with 'pylint==3.3.1' \
        --with 'zennit==0.5.1' \
        --with 'corelay==0.2.1' \
        --with 'h5py==3.12.1' \
        --with 'pyyaml==6.0.2' \
        pylint \
            --rcfile .pylintrc \
            --disable duplicate-code \
            ../../docs/examples/hdf5_structure.py \
            ../../docs/examples/make_project.py \
            ../../docs/examples/meta_analysis.py \
            ../../docs/examples/test-project/make_test_data.py \
            ../../docs/examples/vgg16-project/explain_vgg.py \
            ../../docs/examples/vgg16-project/make_dataset.py \
            ../../docs/examples/vgg16-project/train_vgg.py

# A test environment that will run the PyCodeStyle linter on the REST API backend, the unit tests, the setup script, and the Sphinx configuration file
[testenv:pycodestyle]
base_python = python3.13
commands =
    uv run pycodestyle \
        --config=".pycodestyle" \
        "../../source/backend/virelay" \
        "../unit_tests" \
        "../../docs/source/conf.py"
    uv run \
        --no-project \
        --python 3.9.20 \
        --with 'pycodestyle==2.12.1' \
        --with 'zennit==0.5.1' \
        --with 'corelay==0.2.1' \
        --with 'h5py==3.12.1' \
        --with 'pyyaml==6.0.2' \
        pycodestyle \
            --config .pycodestyle \
            ../../docs/examples/hdf5_structure.py \
            ../../docs/examples/make_project.py \
            ../../docs/examples/meta_analysis.py \
            ../../docs/examples/test-project/make_test_data.py \
            ../../docs/examples/vgg16-project/explain_vgg.py \
            ../../docs/examples/vgg16-project/make_dataset.py \
            ../../docs/examples/vgg16-project/train_vgg.py

# A test environment that will run the PyDocLint docstring linter on the REST API backend, the unit tests, the setup script, and the Sphinx
# configuration file
[testenv:pydoclint]
base_python = python3.13
commands =
    uv run pydoclint \
        --config=".pydoclint.toml" \
        "../../source/backend/virelay" \
        "../unit_tests" \
        "../../docs/source/conf.py"
    uv run \
        --no-project \
        --python 3.9.20 \
        --with 'pydoclint==0.5.9' \
        --with 'zennit==0.5.1' \
        --with 'corelay==0.2.1' \
        --with 'h5py==3.12.1' \
        --with 'pyyaml==6.0.2' \
        pydoclint \
            --config .pydoclint.toml \
            ../../docs/examples/hdf5_structure.py \
            ../../docs/examples/make_project.py \
            ../../docs/examples/meta_analysis.py \
            ../../docs/examples/test-project/make_test_data.py \
            ../../docs/examples/vgg16-project/explain_vgg.py \
            ../../docs/examples/vgg16-project/make_dataset.py \
            ../../docs/examples/vgg16-project/train_vgg.py

# A test environment that will run the MyPy static type checker on the REST API backend, the unit tests, the setup script, and the Sphinx
# configuration file
[testenv:mypy]
base_python = python3.13
commands =
    uv run mypy \
        --config-file=".mypy.ini" \
        "../../source/backend/virelay" \
        "../unit_tests" \
        "../../docs/source/conf.py"
    uv run \
        --no-project \
        --python 3.9.20 \
        --with 'mypy==1.12.0' \
        --with 'zennit==0.5.1' \
        --with 'corelay==0.2.1' \
        --with 'h5py==3.12.1' \
        --with 'pyyaml==6.0.2' \
        --with 'types-PyYAML==6.0.12.20240917' \
        mypy \
            --config-file .mypy.ini \
            --ignore-missing-imports \
            ../../docs/examples/hdf5_structure.py \
            ../../docs/examples/make_project.py \
            ../../docs/examples/meta_analysis.py \
            ../../docs/examples/test-project/make_test_data.py \
            ../../docs/examples/vgg16-project/explain_vgg.py \
            ../../docs/examples/vgg16-project/make_dataset.py \
            ../../docs/examples/vgg16-project/train_vgg.py

# The configuration for the PyTest test runner
[pytest]
testpaths = ../unit_tests
addopts = -ra -l
filterwarnings = error

# The general configuration for the PyTest coverage plugin
[coverage:run]

# Specifies that branch coverage should be measured
branch = true

# Causes the PyTest coverage plugin to append the machine name, process ID, and a random number to the data file name to simplify collecting data from
# many processes; this is done because we are running the unit tests using multiple Python versions
parallel = true

# The __main__.py and application.py files cannot be tested, since they start the REST API server, and the __init__.py cannot be tested, since it
# depends on the version.py file, which is generated by the build system, therefore, they are omitted from the coverage measurement and reporting
omit=*/virelay/version.py,*/virelay/__main__.py,*/virelay/application.py

# The configuration for the PyTest coverage plugin when generating the coverage report
[coverage:report]

# Specifies that files that have 100% coverage should be omitted from the report, so that we can focus on the files that need more testing
skip_covered = true

# Specifies that the report should include a list of the lines that were not covered by the unit tests
show_missing = true

# A list of regular expressions that will be used to exclude certain lines from the coverage measurement
exclude_also =

    # The run method of the Server class is excluded, since it starts the REST API server and cannot be tested
    def run\(self, host: str = '[^\']*', port: int = [0-9]+\) -> None:

    # The import of the version.py module, which is generated by the build system, in the __init__.py module cannot be tested, because either the
    # user has created a build and the version.py module is present, or the user has not created a build and the version.py module is not present, in
    # either case, one of the two branches will not be covered
    try:\n\s+from virelay\.version import version as VERSION\nexcept ModuleNotFoundError:\n\s+VERSION = 'unknown'

# Since the coverage data can be collected from multiple different installations of ViRelAy, the Coverage tool needs to know which files are
# equivalent; this configuration section contains named lists (in our case only a single list called "source"), where two file paths are considered
# equivalent and combined when running the "coverage combine" command when they are in the same list; here we specify that the files in directories
# called */source/backend/virelay and */.tox/*/lib/python*/site-packages/virelay are equivalent
[coverage:paths]
source = */source/backend/virelay,*/.tox/*/lib/python*/site-packages/virelay
