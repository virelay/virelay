
# Core tox configuration
[tox]

# A list of environments that will be run by default when running tox without specifying any environment
env_list = py310,py311,py312,coverage,pylint,pycodestyle,pydoclint,mypy,docs

# Even if some of the environments fail due to missing interpreters, tox will return success (this is helpful when running tox locally without having
# all supported Python versions installed)
skip_missing_interpreters = true

# Base configuration for test environments that tox will fallback to for missing values; this avoids having to repeat the same configuration for the
# unit test environments py310, py311, and py312 over and over again; it runs the unit tests for the backend REST API with the corresponding Python
# version
[testenv]
extras = tests
set_env =
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
commands =
    pytest \
        --cov "{envsitepackagesdir}/virelay" \
        --cov-config "{toxinidir}/tox.ini" \
        --cov-append \
        {posargs:.}

# A test environment that combines the coverage data from all runs of the unit tests with the different Python versions and generates a single report
[testenv:coverage]
extras = tests
set_env =
    COVERAGE_FILE = {toxworkdir}/.coverage
commands =
    coverage combine
    coverage report -m
depends = py310,py311,py312

# A test environment that will build the documentation using Sphinx
[testenv:docs]
base_python = python3.12
extras = docs
commands =
    sphinx-build \
        --color \
        -W \
        --keep-going \
        -d "{toxinidir}/docs/doctree" \
        -b html \
        "{toxinidir}/docs/source" \
        "{toxinidir}/docs/build" \
        {posargs}

# A test environment that will run the PyLint linter on the REST API backend, the unit tests, the setup script, and the Sphinx configuration file
[testenv:pylint]
base_python = python3.12
extras =
    docs
    tests
    linting
change_dir = {toxinidir}
commands =
    pylint \
        --rcfile=tests/config/.pylintrc \
        --output-format=parseable \
        virelay \
        tests/unit_tests \
        setup.py \
        docs/source/conf.py

# A test environment that will run the PyCodeStyle linter on the REST API backend, the unit tests, the setup script, and the Sphinx configuration file
[testenv:pycodestyle]
base_python = python3.12
extras =
    docs
    tests
    linting
change_dir = {toxinidir}
commands =
    pycodestyle \
        --config=tests/config/.pycodestyle \
        virelay \
        tests/unit_tests \
        setup.py \
        docs/source/conf.py

# A test environment that will run the PyDocLint docstring linter on the REST API backend, the unit tests, the setup script, and the Sphinx
# configuration file
[testenv:pydoclint]
base_python = python3.12
extras =
    docs
    tests
    linting
change_dir = {toxinidir}
commands =
    pydoclint \
        --config=tests/config/.pydoclint.toml \
        virelay \
        tests/unit_tests \
        setup.py \
        docs/source/conf.py

# A test environment that will run the MyPy static type checker on the REST API backend, the unit tests, the setup script, and the Sphinx
# configuration file
[testenv:mypy]
base_python = python3.12
extras =
    docs
    tests
    linting
change_dir = {toxinidir}
commands =
    mypy \
        --config-file=tests/config/.mypy.ini \
        virelay \
        tests/unit_tests \
        setup.py \
        docs/source/conf.py

# The configuration for the PyTest test runner
[pytest]
testpaths = tests
addopts = -ra -l
filterwarnings = error

# The general configuration for the PyTest coverage plugin
[coverage:run]

# Specifies that branch coverage should be measured
branch = true

# Causes the PyTest coverage plugin to append the machine name, process ID, and a random number to the data file name to simplify collecting data from
# many processes; this is done because we are running the unit tests using multiple Python versions
parallel = true

# The __main__.py and application.py files cannot be tested, since they start the REST API server, therefore, they are omitted from the coverage
# measurement and reporting
omit=*/virelay/__main__.py,*/virelay/application.py

# The configuration for the PyTest coverage plugin when generating the coverage report
[coverage:report]

# Specifies that files that have 100% coverage should be omitted from the report, so that we can focus on the files that need more testing
skip_covered = true

# Specifies that the report should include a list of the lines that were not covered by the unit tests
show_missing = true

# A list of regular expressions that will be used to exclude certain lines from the coverage measurement; here, the run method of the Server class is
# excluded, since it starts the REST API server and cannot be tested
exclude_lines = def run

# Since the coverage data can be collected from multiple different installations of ViRelAy, the Coverage tool needs to know which files are
# equivalent; this configuration section contains named lists (in our case only a single list called "source"), where two file paths are considered
# equivalent and combined when running the "coverage combine" command when they are in the same list; here we specify that the files in directories
# called virelay, /.tox/*/lib/python*/site-packages, and */virelay are equivalent
[coverage:paths]
source = virelay,*/.tox/*/lib/python*/site-packages/virelay,*/virelay
